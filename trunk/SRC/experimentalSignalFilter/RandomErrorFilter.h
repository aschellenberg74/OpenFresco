/* ****************************************************************** **
**    OpenFRESCO - Open Framework                                     **
**                 for Experimental Setup and Control                 **
**                                                                    **
**                                                                    **
** Copyright (c) 2006, Yoshikazu Takahashi, Kyoto University          **
** All rights reserved.                                               **
**                                                                    **
** Licensed under the modified BSD License (the "License");           **
** you may not use this file except in compliance with the License.   **
** You may obtain a copy of the License in main directory.            **
** Unless required by applicable law or agreed to in writing,         **
** software distributed under the License is distributed on an        **
** "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       **
** either express or implied. See the License for the specific        **
** language governing permissions and limitations under the License.  **
**                                                                    **
** Developed by:                                                      **
**   Yoshikazu Takahashi (yos@catfish.dpri.kyoto-u.ac.jp)             **
**   Andreas Schellenberg (andreas.schellenberg@gmx.net)              **
**   Gregory L. Fenves (fenves@berkeley.edu)                          **
**                                                                    **
** ****************************************************************** */

// $Revision$
// $Date$
// $URL: $

#ifndef RandomErrorFilter_h
#define RandomErrorFilter_h

// Written: Yoshi (yos@catfish.dpri.kyoto-u.ac.jp)
// Created: 09/06
// Revision: A
//
// Description: This file contains the class definition for 
// RandomErrorFilter. The white noise Gauss noise is
// generated using the Box-Muller method. The uniform deviates
// are generated by the special function based on NR::ran3
// in Numerical Recipes in C++, 2nd Ed.

#include "ErrorFilter.h"

class RandomErrorFilter : public ErrorFilter
{
public:
    // constructors
    RandomErrorFilter(int tag, double ave, double std);
    RandomErrorFilter(const RandomErrorFilter& ref);
    
    // destructor
    virtual ~RandomErrorFilter();
    
    virtual double filtering(double data);
    virtual void update();
    
    virtual SignalFilter *getCopy();
    void Print(OPS_Stream &s, int flag);
    
private:
    void init_rand3();
    double rand3();
    double rand1();
    double gen_rand();
    
    double data;
    
    double mean;    // mean value of random numbers
    double sigma;   // variation of random numbers
    double ampl;    // amplitude of error
    int idseed;     // seed of random numbers, defined by time() % MBIG
    
    double Pi;      // = 3.141592....
    int sw;
    
    int inext, inextp;
    
    // According to Knuth, any large MBIG, and any smaller 
    // (but still large) MSEED can be substituted. In this object, 
    int MBIG;       // = 1000000000
    int MSEED;      // = 161803398
    int MZ;         // = 0
    double FAC;     // = 1/MBIG
    int *ma;        // array ma[56]. The value 56 is special and 
    // shouldn't modified.
    double amp, theta;
};

#endif
