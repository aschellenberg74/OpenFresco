/* ****************************************************************** **
**    OpenFRESCO - Open Framework                                     **
**                 for Experimental Setup and Control                 **
**                                                                    **
**                                                                    **
** Copyright (c) 2006, The Regents of the University of California    **
** All Rights Reserved.                                               **
**                                                                    **
** Commercial use of this program without express permission of the   **
** University of California, Berkeley, is strictly prohibited. See    **
** file 'COPYRIGHT_UCB' in main directory for information on usage    **
** and redistribution, and for a DISCLAIMER OF ALL WARRANTIES.        **
**                                                                    **
** Developed by:                                                      **
**   Andreas Schellenberg (andreas.schellenberg@gmx.net)              **
**   Yoshikazu Takahashi (yos@catfish.dpri.kyoto-u.ac.jp)             **
**   Gregory L. Fenves (fenves@berkeley.edu)                          **
**   Stephen A. Mahin (mahin@berkeley.edu)                            **
**                                                                    **
** ****************************************************************** */

// $Revision$
// $Date$
// $URL$

#ifndef ESFErrorSimRandomGauss_h
#define ESFErrorSimRandomGauss_h

// Written: Hong Kim (hongkim@berkeley.edu)
// Created: 10/10
// Revision: A
//
// Description: This file contains the class definition for 
// ESFErrorSimRandomGauss. The white noise Gauss noise is
// generated using the Box-Muller method. The uniform deviates
// are generated by the special function based on NR::ran3
// in Numerical Recipes in C++, 2nd Ed.

#include "ESFErrorSimulation.h"

class ESFErrorSimRandomGauss : public ESFErrorSimulation
{
public:
    // constructors
    ESFErrorSimRandomGauss(int tag, double ave, double std);
    ESFErrorSimRandomGauss(const ESFErrorSimRandomGauss& esf);
    
    // destructor
    virtual ~ESFErrorSimRandomGauss();
    
    // method to get class type
    const char *getClassType() const {return "ESFErrorSimRandomGauss";};
    
    virtual double filtering(double data);
    virtual void update();
    
    virtual ExperimentalSignalFilter *getCopy();
    
    // public methods for output
    void Print(OPS_Stream &s, int flag = 0);
    
private:
    void init_rand3();
    double rand3();
    double rand1();
    double gen_rand();
    
    double data;
    
    double mean;    // mean value of random numbers
    double sigma;   // variation of random numbers
    double ampl;    // amplitude of error
    int idseed;     // seed of random numbers, defined by time() % MBIG
    
    double Pi;      // = 3.141592....
    int sw;
    
    int inext, inextp;
    
    // According to Knuth, any large MBIG, and any smaller 
    // (but still large) MSEED can be substituted. In this object, 
    int MBIG;       // = 1000000000
    int MSEED;      // = 161803398
    int MZ;         // = 0
    double FAC;     // = 1/MBIG
    int *ma;        // array ma[56]. The value 56 is special and shouldn't modified.
    double amp, theta;
};

#endif
